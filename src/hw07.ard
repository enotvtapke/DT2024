\import Data.Maybe
\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import lect05 (funExt)
\import lect07
\open Nat(mod)

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (a,b) => \new Pair { | fst_ => b | snd_ => a }

-- При помощи \new и доступа к полям.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair B A p.snd_ p.fst_

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => \case p.p

\func one-isPos : PosNat 1 => \new PosNat { | p => () }

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record PrimalPair (a b : Nat) (p : Not (\Sigma (d : Nat) (p1 : a mod d = 0) (p2 : b mod d = 0) (p3 : Not (d = 1))))

\func Pair60 : \Type => PrimalPair { | a => 60 }

-- 5. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\func funExt1 {A B : \Type} {f g : \Pi (a : A) -> B}
             (p : \Pi (a : A) -> f a = g a) : f = g
  => \lam i a => p a i

\class Monad \extends Functor {
  | return {A : \Set} : A -> F A
  | \infixl 1 >>= {A B : \Set} : F A -> (A -> F B) -> F B
  | return-left-ident {A B : \Set} (x : A) (f : A -> F B) : (return x >>= f) = f x
  | return-right-ident {A : \Set} (x : F A) : (x >>= return) = x
  | bind-assoc {A B C : \Set} (f : A -> F B) (g : B -> F C) (x : F A) : (x >>= \lam y => f y >>= g) = (x >>= f >>= g)
  \default fmap {A B : \Set} (f : A -> B) (x : F A): F B => x >>= \lam y => return (f y)
  \default fmap-id {A : \Set} (x : F A) : fmap (\lam a => a) x = x => return-right-ident x
  \default  fmap-comp {A B C : \Set} (f : A -> B) (g : B -> C) (x : F A) : fmap (\lam a => g (f a)) x = fmap g (fmap f x) =>
    rewriteI (bind-assoc (\lam y => return (f y)) (\lam y => return (g y)) x) $
    pmap (x >>=) $
    funExt (\lam _ => F C) $ \lam z => inv $ return-left-ident (f z) (\lam y => return (g y))
}

-- 6. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe
  | return a => just a
  | >>= {A B : \Set} (ma : Maybe A) (f : A -> Maybe B) : Maybe B \elim ma {
    | nothing => nothing
    | just a => f a
  }
  | return-left-ident {A B : \Set} (x : A) (f : A -> Maybe B) : f x = f x => idp
  | return-right-ident {A : \Set} (x : Maybe A) : (x >>= just) = x \elim x {
    | nothing => idp
    | just a => idp
  }
  | bind-assoc {A B C : \Set} (f : A -> Maybe B) (g : B -> Maybe C) (x : Maybe A) : (x >>= (\lam y => f y >>= g)) = (x >>= f >>= g)
    \elim x {
      | nothing => idp
      | just a => idp
    }

-- 7. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\instance StateMonad {S : \Set} : Monad (State S)
  | return {A : \Set} (x : A) => \new State { | state => \lam s => (s, x) }
  | >>= {A B : \Set} (ma : State S A) (f : A -> State S B) : State S B => \new State {
    | state => \lam s => \let x => ma.state s \in state {f x.2} x.1
  }
  | return-left-ident {A B : \Set} (x : A) (f : A -> State S B) : f x = f x => idp
  | bind-assoc {A B C : \Set} (f : A -> State S B) (g : B -> State S C) (x : State S A) : (x >>= (\lam y => f y >>= g)) = (x >>= f >>= g) => idp
  | return-right-ident {A : \Set} (x : State S A) => idp

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\instance State'Monad {S : \Set} : Monad (State' S)
  | return {A : \Set} (x : A): State' S A => state' $ \lam s => (s, x)
  | >>= {A B : \Set} (ma : State' S A) (f : A -> State' S B) : State' S B => state' (\lam s => \case ma \with {
    | state' st => \let y => st s \in \case f y.2 \with {
      | state' st' => st' y.1
    }
  })
  | return-left-ident {A B : \Set} (x : A) (f : A -> State' S B) => unfold return $ unfold (>>=) $ {?}
  | bind-assoc => {?}
  | return-right-ident {A : \Set} (x : State' S A) => {?}
