-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ x _ : Nat): Nat => x
\func apply (f : Nat -> Nat) (x : Nat): Nat => f x
\func compose (f g : Nat -> Nat) (x : Nat): Nat => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x
\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infixl 1 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infixl 2 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (p b1 b2 : Bool) : Bool \elim p
  | true => b1
  | false => b2

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x x (if y y false)

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat): Nat \elim y
  | 0 => 1
  | suc y => x * x ^ y

\func fac (x : Nat): Nat
  | 0 => 1
  | suc x => suc x * x

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => x - div x y * y

\func gcd (x y : Nat): Nat => aux (if' (x < y) y x) x y
  \where {
    \func aux (fuel x y : Nat) : Nat \elim fuel
      | 0 => 1
      | suc fuel => if' (x = y) x (if' (x < y) (aux fuel x (y - x)) (aux fuel (x - y) y))

    \func \infix 4 = (x y : Nat) : Bool
      | 0, 0 => true
      | 0, suc y => false
      | suc x, 0 => false
      | suc x, suc y => x = y

    \func if' (x : Bool) (t e : Nat) : Nat \elim x
      | true => t
      | false => e
  }
