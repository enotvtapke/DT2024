\import Data.List
\import Function.Meta
\import Paths
\import Paths.Meta
\import lect03
\open Nat (+, *)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.

\func fileTestProof : fileTest = lect03.fileTest => idp
  \where
    \func fileTest => (17, 8, 13, 55, 18, 21)

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\func t''' => ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29))
  \where
    \func t'''Proof : t''' = lect03.M5.t''' => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | a :: xs => pmap (a ::) $ ++-assoc xs ys zs

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

-- Это утверждение будет полезно для доказательства.

\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => nil-neutral $ reverse ys
  | a :: xs => rewrite (reverse++ xs ys) $ ++-assoc (reverse ys) (reverse xs) (a :: nil)
  \where
    \func nil-neutral {A : \Type} (xs : List A) : xs = xs ++ nil \elim xs
      | nil => idp
      | a :: xs => pmap (a ::) $ nil-neutral xs

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | a :: xs => rewrite (reverse++ (reverse xs) (a :: nil)) $ pmap (a ::) $ reverse-isInvolutive xs

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n => rewrite rdistr $ h (m * n) (k * n) m k

\func h (a b c d : Nat) : a + b + (c + d) = a + c + (b + d) =>
  rewriteI (+-assoc (a + b) c d ) $
  rewriteI (+-assoc (a + c) b d ) $
  rewrite (+-assoc a c b) $
  rewrite (+-comm c b) $
  rewriteI (+-assoc a b c) idp

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim m, k
  | 0, 0 => idp
  | 0, suc k => idp
  | suc m, 0 => idp
  | suc m, suc k => rewrite ldistr $
  rewrite (+-assoc (n * m + n * k) n n) $
  h (n * m) (n * k)  n n

-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam x => f a b = f x b') p $ transport (\lam x => f a b = f a x) q idp

-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam x => x) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p) b
