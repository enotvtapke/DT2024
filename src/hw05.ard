\import Data.Bool
\import Function
\import Function.Meta
\import Logic
\import Paths
\import lect02 (not-isInvolution_)
\import lect05 \hiding (true/=false)

-- 1. Докажите pmap при помощи паттерн матчинга с idp.

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' \elim p
  | idp => idp

-- 2. Докажите pmap2 при помощи паттерн матчинга с idp.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' \elim p, q
  | idp, idp => idp

-- Optional task
-- 3 У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p => J (\lam a' p => B a a' p) (b a) p

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.
-- Hint:
-- a. Выразите transport через Jalt.
-- b. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный, то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x,idp) = p.
-- c. Используя эти две конструкции, легко определить J.

-- Why?
-- \func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => \let a => Jalt (\lam a a' p => B a = B a') (\lam c => idp) p \in p right

\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => {?}

-- \func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a,idp) = {\Sigma (x : A) (a = x)} p => \let aa => Jalt (\lam a x p => (a, idp) = (x, idp)) (\lam x => idp) p.2 \in aa left
\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a,idp) = {\Sigma (x : A) (a = x)} p => {?}

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p => {?}

-- 4. Определите функцию swap и докажите, что swap (swap p) = p.

\func swap {A B : \Type} (p : \Sigma A B) : \Sigma B A \elim p
  | (a, b) => (b, a)

\func swap-involutive {A B : \Type} (p : \Sigma A B) : swap (swap p) = p => idp

-- 5. Докажите, что (\lam x => not (not x)) = (\lam x => x).

\func notNotId : (\lam x => not (not x)) = (\lam x => x) => funExt (\lam _ => Bool) not-isInvolution_

-- 6. Докажите, что fac не равен suc.

\open Nat(*)

\func fac (n : Nat) : Nat
  | 0 => 1
  | suc n => suc n * fac n

\func TN (n : Nat) : \Type
  | suc zero => \Sigma
  | _ => Empty

\func fac/=suc (p : fac = suc) : Empty => \let | x => (funExtInv (\lam _ => Nat) p) 1
                                               | y => transport TN x ()
                                          \in y
  \where
    \func funExtInv {A : \Type} (B : A -> \Type) {f g : \Pi (a : A) -> B a}
                 (p : f = g) : \Pi (a : A) -> f a = g a
      => \lam a i => p i a

-- 7. Докажите, что left = right, не используя transport, coe и паттерн матчинг с idp.

\func left=right : left = right => id

-- 8. Докажите, что если a = a' и b = b', то (a,b) = (a',b'), не используя transport, coe и паттерн матчинг с idp.

\func pairEq {A B : \Type} {a a' : A} {b b' : B} (p : a = a') (q : b = b') : (a,b) = (a',b') => \lam i => \let x => p i | y => q i \in (x, y)

-- 9. Докажите, что если p = p', то p.1 = p'.1, не используя transport, coe и паттерн матчинг с idp.

\func projEq {A : \Type} (B : A -> \Type) {p p' : \Sigma (x : A) (B x)} (t : p = p') : p.1 = p'.1 => \lam i => (t i).1

-- 10. Докажите pmap2, не используя transport, coe и паттерн матчинг с idp.

\func pmap2' {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' => \lam i => \let x => p i | y => q i \in f x y

-- 11. Мы видели как определить transport через coe. Определите частный случай coe через transport.

\func coe0 (A : I -> \Type) (a : A left) : A right => transport A id a

-- 12. Докажите, что transport' от константной функции возвращает свой последний аргумент.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' \elim p
  | idp => b

\func transport'_const {A B : \Type} {a a' : A} (p : a = a') (b : B) : transport' (\lam _ => B) p b = b \elim p
  | idp => idp

-- 13. Определите функцию B right -> B left.

\func Itr' {B : I -> \Type} (b : B right) : B left => transportInv B id b
